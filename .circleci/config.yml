version: 2
jobs:
  build:
    docker:
       - image: circleci/ruby:2.5.1-node
         environment:
           PGHOST: 127.0.0.1
           PGUSER: root
           RAILS_ENV: test
           COVERAGE: true

       - image: circleci/postgres:9.6-alpine
         environment:
           POSTGRES_USER: root
           POSTGRES_PASSWORD: ""
           POSTGRES_DB: circleci_test

    working_directory: ~/repo

    steps:
      - run: gem update --system
      - run: gem install bundler

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v3-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle --without oracle

      - save_cache:
          paths:
            - vendor/bundle
          key: v3-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundler-Audit
          command: bin/lois bundler-audit -g $GITHUB_CREDENTIALS

      - run:
          name: Brakeman
          command: bin/lois brakeman -g $GITHUB_CREDENTIALS

      - run:
          name: Rubocop
          command: bin/lois rubocop -g $GITHUB_CREDENTIALS

      - run:
          name: Reek
          command: bin/lois reek -g $GITHUB_CREDENTIALS

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 5m

      - run:
          name: Database setup
          command: |
            bin/rails db:create --trace
            bin/rails db:schema:load --trace

      - run:
          name: RSpec
          command: |
            mkdir results
            bundle exec rspec --format progress --format RspecJunitFormatter --out results/rspec.xml

      - store_test_results:
          path: results

      - store_artifacts:
          path: results
          destination: results

      - store_artifacts:
          path: lois
          destination: lois

      - store_artifacts:
          path: coverage
          destination: coverage
